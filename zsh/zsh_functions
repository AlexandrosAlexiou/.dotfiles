#!/usr/bin/env bash

# ----------------------------------------------------- Functions -----------------------------------------------------

# NOTE:
# The defined functions below follow the POSIX standard for functions.
# i.e. without using the keyword `function`

# This function returns an approximation of the memory usage of a process
# https://stackoverflow.com/questions/3853655/in-linux-how-to-tell-how-much-memory-processes-are-using
mem() {
    ps -eo rss,pid,euser,args:100 --sort %mem | grep --color=auto -v grep | grep --color=auto -i "$@" \
        | awk '{printf $1/1024 " MB"; $1=""; print }'
}

# This function extracts any archive supplied as argument
extract() {
    for archive in "$@"; do
        if [ -f "$archive" ]; then
            case "$archive" in
                *.tar.bz2) tar xvjf "$archive" ;;
                 *.tar.gz) tar xvzf "$archive" ;;
                    *.bz2) bunzip2 "$archive" ;;
                    *.rar) rar x "$archive" ;;
                     *.gz) gunzip "$archive" ;;
                    *.tar) tar xvf "$archive" ;;
                   *.tbz2) tar xvjf "$archive" ;;
                    *.tgz) tar xvzf "$archive" ;;
                    *.zip) unzip "$archive" ;;
                      *.Z) uncompress "$archive" ;;
                     *.7z) 7z x "$archive" ;;
                        *) echo "Don't know how to extract '$archive' ..." ;;
            esac
        else
            echo "'$archive' is not a valid file!"
        fi
    done
}

# This command serves the contents of the passed directory in an HTTP server at port:8000
serve() {
    if [[ $# -ne 0 ]]; then
        if [ ! -d "$1" ]; then
            echo "ERROR: '$1' is not a valid directory."
            return 1
        fi
        saved_path=$(pwd)
        cd "$1" || exit
        served_path=$(pwd)
        echo "Serving '$served_path' ..."
        echo "IP: $(hostname -I)"
        python3 -m http.server
        cd "$saved_path" || exit
    else
        echo "Serving current directory '.'"
        echo "IP: $(hostname -I)"
        python3 -m http.server
    fi
}

# This fixes the permissions on files and directories
# Setting them to 755 for folders and 644 for files
fix_perms() {
    if [[ $# -eq 0 ]]; then
        dest=.
    else
        dest=$1
    fi
    find "$dest" -type d -print0 | xargs chmod -v 755
    find "$dest" -type f -print0 | xargs chmod -v 644
}

# This issue's help bash function while inside zsh
help() {
    $(command -v bash) -c "help $1"
}

# This function creates a backup of the provided directories & files
backup() {
    if [[ $# -eq 0 ]]; then
        echo "You must provide the dir(s)/file(s) that you want to backup."
        return 1
    fi
    date_time=$(date +%F_%T:%Z)
    for arg in "$@"; do
        # Remove potential trailing slash(es), ':' acts as a delimiter
        local source=$(echo "$arg" | sed 's:/*$::')
        local target="$source.backup.$date_time"
        echo "Backing up '$source' -> '$target'"
        cp --interactive --recursive --preserve "$source" "$target"
    done
}

# This is to rebase master branch onto the current branch
gmrebase() {
    local RED='\033[0;31m'
    local NC='\033[0m'
    echo -e "${RED}==> Checking out master...${NC}"
    git checkout master
    echo ""
    echo -e "${RED}==> Pulling latest master...${NC}"
    git pull origin master
    echo ""
    echo -e "${RED}==> Checking back to original branch...${NC}"
    git checkout -
    echo ""
    echo -e "${RED}==> Rebasing master onto $(git rev-parse --abbrev-ref HEAD)...${NC}"
    git rebase master "$(git rev-parse --abbrev-ref HEAD)"
    echo ""
}

# Download latest neovim version -- nightly
download_nvim() {
    local RED='\033[0;31m'
    local NC='\033[0m'
    echo -e "${RED}==> Downloading nightly neovim...${NC}"
    wget -q --show-progress -O \
        /tmp/nvim.appimage https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage
    pushd /tmp/ > /dev/null || return
    [ -f nvim.appimage ] \
        && chmod u+x nvim.appimage \
        && echo -n "Installed " \
        && ./nvim.appimage --version | grep -m 1 NVIM \
        && sudo mv nvim.appimage -v /usr/bin/nvim
    popd > /dev/null || return
}
