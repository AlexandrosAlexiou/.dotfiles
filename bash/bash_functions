#!/usr/bin/env bash

# ----------------------------------------------------- Functions -----------------------------------------------------

# NOTE:
# The defined functions below follow the POSIX standard for functions.
# i.e. without using the keyword `function`

# This function returns an approximation of the memory usage of a process
# https://stackoverflow.com/questions/3853655/in-linux-how-to-tell-how-much-memory-processes-are-using
mem() {
    ps -eo rss,pid,euser,args:100 --sort %mem | grep --color=auto -v grep | grep --color=auto -i "$@" \
        | awk '{printf $1/1024 " MB"; $1=""; print }'
}

# This function extracts any archive supplied as argument
extract() {
    for archive in "$@"; do
        if [ -f "$archive" ]; then
            case "$archive" in
                *.tar.bz2) tar xvjf "$archive" ;;
                *.tar.gz) tar xvzf "$archive" ;;
                *.bz2) bunzip2 "$archive" ;;
                *.rar) rar x "$archive" ;;
                *.gz) gunzip "$archive" ;;
                *.tar) tar xvf "$archive" ;;
                *.tbz2) tar xvjf "$archive" ;;
                *.tgz) tar xvzf "$archive" ;;
                *.zip) unzip "$archive" ;;
                *.Z) uncompress "$archive" ;;
                *.7z) 7z x "$archive" ;;
                *) echo "Don't know how to extract '$archive' ..." ;;
            esac
        else
            echo "'$archive' is not a valid file!"
        fi
    done
}

# This command serves the contents of the passed directory in an HTTP server at port:8000
serve() {
    if [[ $# -ne 0 ]]; then
        if [ ! -d "$1" ]; then
            echo "ERROR: '$1' is not a valid directory."
            return 1
        fi
        saved_path=$(pwd)
        cd "$1" || exit
        served_path=$(pwd)
        echo "Serving '$served_path' ..."
        echo "IP: $(hostname -I)"
        python3 -m http.server
        cd "$saved_path" || exit
    else
        echo "Serving current directory '.'"
        echo "IP: $(hostname -I)"
        python3 -m http.server
    fi
}

# This fixes the permissions on files and directories
# Setting them to 755 for folders and 644 for files
fix_perms() {
    if [[ $# -eq 0 ]]; then
        dest=.
    else
        dest=$1
    fi
    find "$dest" -type d -print0 | xargs chmod -v 755
    find "$dest" -type f -print0 | xargs chmod -v 644
}

# This issue's help bash function while inside zsh
help() {
    $(command -v bash) -c "help $1"
}

# This function creates a backup of the provided directories & files
backup() {
    if [[ $# -eq 0 ]]; then
        echo "You must provide the dir(s)/file(s) that you want to backup."
        return 1
    fi
    date_time=$(date +%F_%T:%Z)
    for arg in "$@"; do
        # Remove potential trailing slash(es), ':' acts as a delimiter
        local source=$(echo "$arg" | sed 's:/*$::')
        local target="$source.backup.$date_time"
        echo "Backing up '$source' -> '$target'"
        cp --interactive --recursive --preserve "$source" "$target"
    done
}

# Read man pages with neovim
nvim_man_pager() {
    if (/usr/bin/man "$1" > /dev/null 2>&1); then
        $EDITOR "+Man $1 | only"
    else
        echo "No manual entry for $1"
    fi
}

# This is to rebase 'main or master' branch onto the current branch
gmrebase() {
    local RED='\033[0;31m'
    local NC='\033[0m'

    # Get the "main" branch which might be either 'main or master' and strip leading '* '
    local MAIN_BRANCH CURR_BRANCH
    MAIN_BRANCH=$(git branch --list main master | sed 's/^[* ] //')
    CURR_BRANCH=$(git branch --show-current)

    echo -e "${RED}==> Checking out ${MAIN_BRANCH}...${NC}"
    git checkout "${MAIN_BRANCH}"
    echo ""
    echo -e "${RED}==> Pulling latest ${MAIN_BRANCH}...${NC}"
    git pull origin "${MAIN_BRANCH}"
    echo ""
    echo -e "${RED}==> Checking out back to ${CURR_BRANCH} branch...${NC}"
    git checkout -
    echo ""
    echo -e "${RED}==> Rebasing ${MAIN_BRANCH} onto ${CURR_BRANCH}...${NC}"
    git rebase "${MAIN_BRANCH}" "${CURR_BRANCH}"
    echo ""
}

# Checks whether the first commit is an ancestor of the second
is_ancestor() {
    if [[ $# -lt 2 || $# -gt 3 ]]; then
        cat << EOF >&2
Usage: is_ancestor [OPTIONS] <commit1> <commit2>

Check if commit1 is an ancestor of commit2 and vice versa.

Options:
  -e   Display extended information (commit SHAs) in the output.
EOF
        return 1
    fi

    local extended
    if [[ $1 == "-e" ]]; then
        extended="true"
        shift
    fi

    local first_commit second_commit
    if [[ $extended == "true" ]]; then
        first_commit=$(git rev-parse "$1")
        second_commit=$(git rev-parse "$2")
    else
        first_commit="$1"
        second_commit="$2"
    fi

    if git merge-base --is-ancestor "$1" "$2"; then
        echo "Commit $first_commit is an ancestor of $second_commit."
    elif git merge-base --is-ancestor "$2" "$1"; then
        echo "Commit $second_commit is an ancestor of $first_commit."
    else
        echo "Error checking commit ancestry. Error code: $?" 1>&2
        return 1
    fi
}
