" -------------------------------------------------------------------------------------------------
"                             __      _______ __  __ _____   _____
"                             \ \    / /_   _|  \/  |  __ \ / ____|
"                              \ \  / /  | | | \  / | |__) | |
"                               \ \/ /   | | | |\/| |  _  /| |
"                                \  /   _| |_| |  | | | \ \| |____
"                                 \/   |_____|_|  |_|_|  \_\\_____|
"
" Author : Tryfon Tsakiris
" Email  : tr.tsakiris@gmail.com
" URL    : https://github.com/tsakirist/configurations/blob/master/neovim/vimrc
" -------------------------------------------------------------------------------------------------

" ----------------------------------- Compatible {{{

" Vim defaults to `compatible` when selecting a vimrc with the command-line '-u' argument.
" Override that behaviour to nocompatible.
if &compatible
  set nocompatible
endif

" }}}

" ----------------------------------- Utility Functions {{{

" Function that checks if a plugin has been loaded or not
" Returns 1 if the plugin is loaded 0 otherwise
function! PluginLoaded(plugin) abort
  return match(&rtp, a:plugin) != -1
endfunction

" Function to zoom-in and zoom-out from a window
function! ZoomToggle() abort
  if exists('t:zoomed') && t:zoomed
    execute t:zoom_winrestcmd
    let t:zoomed = 0
  else
    let t:zoom_winrestcmd = winrestcmd()
    resize
    vertical resize
    let t:zoomed = 1
  endif
endfunction

" Function to trim trailing whitespace
" https://vi.stackexchange.com/a/456
function! TrimTrailingWhitespace() abort
  let l:save = winsaveview()
  keeppatterns %s/\s\+$//e
  call winrestview(l:save)
endfunction

" Function to make a whole word search faster
function! SearchWord(word) abort
  let @/ = '\<' . a:word . '\>'
  normal n
endfunction

" Fills the current line with a double quote, a space and then adds the provided character 'c'
" as many times as needed to align the line with the previous one.
function! Fill(c) abort
  exec 'norm  cc" '
  exec 'norm '.(strlen(getline(line('.') - 1)) - 2).'A'.nr2char(a:c)
endfunction

" }}}

" ----------------------------------- Plugins {{{

" ----------------------------------- Plugin installer {{{

" Automate the process of installing vim-plug when required
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
     \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" }}}

" ----------------------------------- Plugin list {{{

" Plugins will be downloaded under the specified directory
call plug#begin('~/.vim/plugged')

" Colorschemes
Plug 'joshdick/onedark.vim'
Plug 'sonph/onehalf', {'rtp': 'vim/'}
Plug 'morhetz/gruvbox'
Plug 'doums/darcula'

" Lightline statusline/tabline
Plug 'itchyny/lightline.vim'
Plug 'mengelbrecht/lightline-bufferline'

" Airline statusline/tabline
" Plug 'vim-airline/vim-airline'
" Plug 'vim-airline/vim-airline-themes'

" Syntax highlighting and more
Plug 'sheerun/vim-polyglot'
Plug 'octol/vim-cpp-enhanced-highlight'

" Nerd plugins
Plug 'scrooloose/nerdtree'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'scrooloose/nerdcommenter'

" Multiple cursors like in Sublime3
Plug 'terryma/vim-multiple-cursors'

" Fancy start/welcome screen
Plug 'mhinz/vim-startify'

" Display identation levels with lines
Plug 'Yggdroot/indentLine'

" Distraction free mode
Plug 'junegunn/goyo.vim'

" Surround mappings for enclosed text
Plug 'tpope/vim-surround'

" Auto insert brackets, parentheses, etc
Plug 'jiangmiao/auto-pairs'

" Easily locate cursor after search
Plug 'inside/vim-search-pulse'

" Show an indication in the sign column for git diffs
Plug 'mhinz/vim-signify'

" A git wrapper for vim
Plug 'tpope/vim-fugitive'

" Git blamer with inline text
Plug 'APZelos/blamer.nvim'

" Vim wrapper for UNIX shell commands
" :SudoWrite, :SudoRead doesn't work with neovim
Plug 'tpope/vim-eunuch'

" Automatically detect indentation setting of the current file
Plug 'luochen1990/indent-detector.vim'

" Write/Read files with sudo from within vim
Plug 'lambdalisue/suda.vim'

" Automatically resize opened windows
Plug 'justincampbell/vim-eighties'

" An interactive calculator inside a buffer
Plug 'fedorenchik/VimCalc3'

" Highlight/Underline word under cursor
Plug 'dominikduda/vim_current_word'

" Fold everything except the search pattern
Plug 'embear/Vim-foldsearch'

" Text alignment
Plug 'junegunn/vim-easy-align'

" Use terminal in a floating pop up window
Plug 'voldikss/vim-floaterm'

" Add file type icons to various plugins
Plug 'ryanoasis/vim-devicons'

" Measure the startup time of vim
Plug 'dstein64/vim-startuptime'

" Display available keybinds in pop-up
Plug 'liuchengxu/vim-which-key'

" Alternate between header/source
Plug 'ton/vim-alternate'

" Intellisense engine with LSP like VSCode
" Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Rooter changes the working directory to the project root when you open a file or directory
" Pretty handy with FZF
Plug 'airblade/vim-rooter'

" The world-renowned fuzzy finder FZF
" This will try to install FZF outside of vim plug directory
Plug 'junegunn/fzf', { 'dir': '~/.fzf','do': './install --key-bindings --completion --no-update-rc' }
Plug 'junegunn/fzf.vim'

" Cool new tabline for buffers and handy commands
" Plug 'kyazdani42/nvim-web-devicons'
" Plug 'romgrk/barbar.nvim'

" Unused but worthy plugins
" -------------------------
" A visualization plugin for the undo/redo branches
" Plug 'mbbill/undotree'

" Smoother and more natural scrolling inside vim
" Plug 'psliwka/vim-smoothie'

" Update/auto-generate ctags
" Plug 'ludovicchabant/vim-gutentags'

" Set paste mode on by default and disable it afterwards
" Plug 'roxma/vim-paste-easy'
" -------------------------

" List ends here. Plugins become visible to Vim after this call
call plug#end()

" }}}

" }}}

" ----------------------------------- Settings {{{

" Syntax highlighting
syntax on

" Set true colors inside neovim
set termguicolors

" Custom colorscheme
" silent! colorscheme onedark
" silent! colorscheme onehalfdark
silent! colorscheme darcula

" Disable the irritating white fg that comes from darcula theme
if (exists('g:colors_name') && g:colors_name == "darcula")
  highlight CursorLine guifg=NONE
endif

" Set the color for the folded sections
highlight Folded guibg=black guifg=darkgray

" Highlight the current line and also highlight the column @120 (ruler)
set colorcolumn=120
set cursorline
" highlight colorcolumn ctermbg=red

" Set hidden to on so as to be able to change buffers without saving first
set hidden

" This displays the line numbers and controls the number of columns used for the line number
set number
set numberwidth=1

" Insert spaces when <Tab> is pressed
set expandtab

" Controls the number of space characters inserted when pressing the tab key
set tabstop=4

" Controls the number of space characters inserted for identation
set shiftwidth=4

" Use the indentation level of the previous line when pressing enter
set autoindent

" Do smart auto-indenting when starting a new line
set smartindent

" The two following options are used alongside with linebreak, but I currently use textwidth
" Make wrapped lines to visually indent properly
" set breakindent

" Set the visual character to be shown for wrapped lines
" set showbreak=\ \\_

" This makes searches case insensitive
set ignorecase

" This makes searches with a single capital letter to be case sensitive
set smartcase

" This highlights the search pattern as you type
set incsearch

" Open windows always below or right
set splitbelow
set splitright

" Set automatic wrap to display lines in next line (this is the default)
set wrap

" Set the maximum text width before vim automatically wraps it, this inserts the EOL character
" This is considered a hard-wrap, one can use linebreak to soft-wrap the lines w/o inserting EOL
set textwidth=120

" Set default encoding
set encoding=UTF-8

" Set the fileformat to unix because windows line endings are bad
set fileformat=unix

" This is used to control the Ctrl + C command and copy to the system's clipboard
" set clipboard+=unnamedplus
set clipboard^=unnamed,unnamedplus

" This option will render characters for spaces, tabs etc
set listchars=trail:·,tab:»·
set list

" This sets the folding method, the default markers are {{{  }}}
set foldmethod=marker

" Set fold enabled
set foldenable

" Enable mouse support
set mouse=a

" }}}

" ----------------------------------- Autocommands {{{

" Format options configuration:
" 't': is required in format options to wrap text in insert mode
" 'l': a line that is longer than textwidth may not be wraped if 'l' is in format options
" 'r': disables the <CR> key from autocommenting when pressing enter in line that contains a comment
autocmd BufEnter * set fo+=t fo-=r fo-=l

" Remove trailing whitespaces on file save
autocmd BufWritePre * :call TrimTrailingWhitespace()

" This is used to preserve the clipboard when vim exits
autocmd VimLeave * call system("xclip -selection clipboard -i", getreg("+"))

" Close NERDTree automatically when it is the only window left open
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

if PluginLoaded('vim-eunuch')
  " Remove SudoWrite, SudoEdit from the commands as they do not work
  autocmd VimEnter * :delcommand SudoWrite | :delcommand SudoEdit
endif

if PluginLoaded('blamer.nvim')
 " Disable blamer at start, normally this shouldn't be required, but w/e
 autocmd VimEnter * :BlamerHide
endif

" Open NERDTree automatically when vim starts
"autocmd vimenter * NERDTree

" Groupped configurations of :term
augroup terminalConfigs
  " Clear old autocommands of this group
  autocmd!
  " Automatically enter in insert mode when in terminal pane
  autocmd TermOpen,BufEnter,WinEnter * if &buftype == 'terminal' | :startinsert | endif
  " Disable linenumbering when in terminal
  autocmd TermOpen * setlocal nonumber norelativenumber
augroup END

" Change linenumber coloring to white for onedark
if (exists("g:colors_name") && g:colors_name == "onedark")
 augroup colorset
  " Clear old autocommands of this group
  autocmd!
  let s:white = { "gui": "#ABB2BF", "cterm": "145", "cterm16" : "7" }
  silent! autocmd ColorScheme * call onedark#set_highlight("LineNr", { "fg": s:white })
 augroup END
endif

" }}}

" ----------------------------------- Extra configurations {{{

" Add persistent undo for vim
" ---------------------------
if has('persistent_undo')
  " Define the paths to store the persistent undo files
  let vim_path = expand('$HOME/.vim')
  let undo_path = expand('$HOME/.vim/undo-dir')
  " Create the required directories if needed with the appropriate permissions
  if !isdirectory(vim_path)
    call mkdir(vim_path, "", 0770)
  endif
  if !isdirectory(undo_path)
    call mkdir(undo_path, "", 0700)
  endif
  " Point vim to the defined undo directory and enable undo persistence
  let &undodir = undo_path
  set undofile
endif

" }}}

" ----------------------------------- Keybindings {{{

" Change buffers quickly
nnoremap <silent> <leader>bn :bnext<CR>
nnoremap <silent> <leader>bp :bprevious<CR>
nnoremap <silent> <leader>bd :bd<CR>
nnoremap <silent> <leader>] :bnext<CR>
nnoremap <silent> <leader>[ :bprevious<CR>

" Equal resize of all opened splits
nnoremap <silent> <leader>eq <C-w>=<CR>

" Toggle line numbers
nnoremap <silent> <leader>l :set nu!<CR>

" Toggle Goyo - distraction free writing
nnoremap <silent> <F1> :Goyo<CR>
nnoremap <silent> <leader>1 :Goyo<CR>

" Toggle between folds
nnoremap <expr> <F2> &foldlevel ? 'zM' :'zR'

" Use space to toggle fold open/close
nnoremap <space> za<CR>

" Fill the current line with a leading "<space><prev_line_cols>[-]
nnoremap <expr> <F3> ":call Fill(45)\<CR>"

" Fill the current line with string '" <count><char>'
" nnoremap <expr> <F3> ':call Fill('.getchar().")\<CR>"

" Set this keyboard combination to toggle NERDTree, it's the same as Sublime Text 3
map <silent> <leader>nt :NERDTreeToggle<CR>

" Set Ctrl-t to jump to next occurence of the word under cursor
nnoremap <silent> <C-t> *

" Keybinds to move lines like
" https://vim.fandom.com/wiki/Moving_lines_up_or_down
" gv=gv re-selects the visual block after each operation
" '==' re-indents the line after it has been moved
nnoremap <silent> <C-S-Up> :m-2<CR>==
nnoremap <silent> <C-S-Down> :m+<CR>==
inoremap <silent> <C-S-Up> <Esc>:m-2<CR>==gi
inoremap <silent> <C-S-Down> <Esc>:m+<CR>==gi
vnoremap <silent> <C-S-Up> :m '<-2<CR>gv=gv
vnoremap <silent> <C-S-Down> :m '>+1<CR>gv=gv

nnoremap <silent> <C-K> :m-2<CR>==
nnoremap <silent> <C-J> :m+<CR>==
inoremap <silent> <C-K> <Esc>:m-2<CR>==gi
inoremap <silent> <C-J> <Esc>:m+<CR>==gi
vnoremap <silent> <C-K> :m '<-2<CR>gv=gv
vnoremap <silent> <C-J> :m '>+1<CR>gv=gv

" Duplicate the current line
" 'm' sets a mark that we can return afterwards by using '`' followed by the mark's name
" :normal properly handles a [count] prepended before the command e.g. 3w, 5d etc
" http://vimcasts.org/episodes/creating-mappings-that-accept-a-count/
nnoremap <leader>d  :normal m`yyp``<CR>
inoremap <leader>d <Esc>m`yyp``<CR>A
vnoremap <leader>d <Esc>m`yyp``<CR>

" Hitting ESC when inside a :term to get into normal mode
tnoremap <Esc> <C-\><C-N>

" Save files with ctrl+s in every mode
nnoremap <C-s> :w<CR>
inoremap <C-s> <Esc>:w<CR>
vnoremap <C-s> <Esc>:w<CR>

" Keymaps to quit current buffer with ctrl+q
nnoremap <silent> <C-q> <Esc>:q<CR>
inoremap <silent> <C-q> <Esc>:q<CR>
vnoremap <silent> <C-q> <Esc>:q<CR>

" Keymap to quit all buffers with shift+q
nnoremap <silent> <S-q> <Esc>:qa<CR>

" Easiliy toggle comments @NERDCommenter
map <leader><leader> <leader>c<Space>

" Toggling comment in insert mode keeps insert mode :startinsert
imap <leader><leader> <Esc><leader>c<Space>:startinsert<CR>

" Clear highlighting with escape when in normal mode
" https://stackoverflow.com/a/1037182/6654329
nnoremap <silent> <Esc> :noh<return><Esc>
nnoremap <silent> <Esc>^[ <Esc>^[

" Keymap to source the vimrc automatically
nnoremap <silent> <leader>sc :source $MYVIMRC<CR>

" Commands/Keymaps to open terminals horizontally and vertically
command! -nargs=* HT split  | terminal <args>
command! -nargs=* VT vsplit | terminal <args>

nnoremap <silent> <leader>ht :HT<CR>
nnoremap <silent> <leader>vt :VT<CR>

" Keybindings to toggle and kill the floating term window
nnoremap <silent> <leader>ft :FloatermToggle<CR>
nnoremap <silent> <leader>fk :FloatermKill<CR>
tnoremap <silent> <leader>ft <C-\><C-n>:FloatermToggle<CR>
tnoremap <silent> <leader>fk <C-\><C-n>:FloatermKill<CR>

" Make the whole-word search proc with <leader>/
command! -nargs=1 SearchWord call SearchWord(<f-args>)
nnoremap <leader>/ :SearchWord

" Command and key mapping to enable the zoom-in and zoom-out
command! ZoomToggle call ZoomToggle()
nnoremap <silent> <leader>z :ZoomToggle<CR>

" Add mouse support and change the default mouse scrolling wheel options
nnoremap <ScrollWheelUp>   4<C-y>
nnoremap <ScrollWheelDown> 4<C-e>
xnoremap <ScrollWheelUp>   4<C-y>
xnoremap <ScrollWheelDown> 4<C-e>

" Git-signify keybinds to use the plugin more easily
nnoremap <silent> <leader>gh :SignifyToggleHighlight<CR>
nnoremap <silent> <leader>gf :SignifyFold<CR>
nnoremap <silent> <leader>gd :SignifyDiff<CR>

" EasyAlign keybindings
" 'vipga' starts interactive EasyAlign in visual mode
" 'gaip' starts interactive EasyAlign for text/motion object
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" Use <Tab> and <S-Tab> to navigate through the autocomplete options
if !PluginLoaded('coc.nvim')
  inoremap <silent> <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <silent> <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
endif

" Remind myself to stop using the god damn arrow keys
nnoremap <silent> <Left>  :echoe "Use h"<CR>
nnoremap <silent> <Right> :echoe "Use l"<CR>
nnoremap <silent> <Up>    :echoe "Use k"<CR>
nnoremap <silent> <Down>  :echoe "Use j"<CR>
vnoremap <silent> <Left>  :<C-u>echoe "Use h"<CR>
vnoremap <silent> <Right> :<C-u>echoe "Use l"<CR>
vnoremap <silent> <Up>    :<C-u>echoe "Use k"<CR>
vnoremap <silent> <Down>  :<C-u>echoe "Use j"<CR>

" nnoremap <silent> <leader>gt :YcmCompleter GoTo<CR>
" nnoremap <silent> <leader>gf :YcmCompleter GoToDefinition<CR>
" nnoremap <silent> <leader>gc :YcmCompleter GoToDeclaration<CR>

" Alternate between header/source files
nnoremap <silent> <leader>ko :Alternate<CR>

" Git blame keybind toggle
nnoremap <silent> <leader>gb :BlamerToggle<CR>

" }}}

" ----------------------------------- Abbreviations {{{

" Shebang abbreviation in insert mode
iab #! #!/usr/bin/env bash

" }}}

" ----------------------------------- Plugins extras {{{

" ----------------------------------- Plugin options {{{

" Statusline configurations options
" ---------------------------------
if PluginLoaded('vim-airline')

  " Airline configuration options
  " -----------------------------
  " Specify the default airline theme
  let g:airline_theme='onehalfdark'

  " Enable tabline extension
  let g:airline#extensions#tabline#enabled=1

  " Add powerline fonts to populate powerline symbols
  let g:airline_powerline_fonts=1

  " Integrate airline with coc
  let g:airline#extensions#coc#enabled=1

elseif PluginLoaded('lightline.vim')

  " Lightline configuration options
  " ---------------------------------
  " Specify default options
  let g:lightline = {
        \ 'colorscheme': "darculaOriginal",
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'readonly', 'filename', 'modified' ] ]
        \ },
        \ 'tabline': {
        \   'left': [ ['buffers'] ],
        \   'right': [ ['close'] ]
        \ },
        \ 'component_expand': {
        \   'buffers': 'lightline#bufferline#buffers'
        \ },
        \ 'component_type': {
        \   'buffers': 'tabsel'
        \ },
        \ 'component_raw': {
        \   'buffers': 1
        \ },
        \}

  " Add devicons to the bufferline
  let g:lightline#bufferline#enable_devicons=1
  "
  " Make buffer clickable this also requires 'component_raw': 'buffres' : 1
  let g:lightline#bufferline#clickable=1

  " Use different symbols in the buffers for modified etc
  let g:lightline#bufferline#unicode_symbols=1

  " This is required for lightline to show the buffers
  set showtabline=2
endif

" Goyo distraction free mode configuration options
" ------------------------------------------------
let g:goyo_width="80%"
let g:goyo_height="85%"
let g:goyo_linenr=0

" Vim-Signify configuration options
" ---------------------------------
" Change the delete sign of git-signify from '_' to '-'
" let g:signify_sign_delete='-'

" Don't show any signs in the column, just colors
let g:signify_sign_show_text=0

" VimEighties configuration options
" ---------------------------------
let g:eighties_minimum_width=80
let g:eighties_enabled=1

" GitNerdTree configuration options
" ---------------------------------
" Align git nerd tree plugin with dev icons
let g:WebDevIconsNerdTreeGitPluginForceVAlign=1

" Vim Current Word configuration options
" --------------------------------------
let g:vim_current_word#highlight_current_word=0

" Suda vim plugin configuration options
" -------------------------------------
" Automatically open files with sudo when needed
let g:suda_smart_edit = 1

" Nerd Commenter configuration options
" -------------------------------------
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims=1

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines=1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace=1

" Make NerdTree more minimal
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=1

" Git blamer delay
let g:blamer_enabled=1
let g:blamer_delay=500

" }}}

" ----------------------------------- Plugin configurations {{{

" ----------------------------------- Which-key configurations {{{

if PluginLoaded("vim-which-key")

 " Set the timeout, 1000 is the default
 set timeoutlen=1000

 " Map leader to which_key
 nnoremap <silent> <leader><space> :silent <c-u> :silent WhichKey '<Space>'<CR>
 vnoremap <silent> <leader><space> :silent <c-u> :silent WhichKeyVisual '<Space>'<CR>

 " Create map to add keys to
 let g:which_key_map = {}

 " Define a separator
 let g:which_key_sep = '→'

 " Not a fan of floating windows for this
 let g:which_key_use_floating_win = 0

 " Change the colors if you want
 highlight default link WhichKey          Operator
 highlight default link WhichKeySeperator DiffAdded
 highlight default link WhichKeyGroup     Identifier
 highlight default link WhichKeyDesc      Function

 " Hide status line
 autocmd! FileType which_key
 autocmd  FileType which_key set laststatus=0 noshowmode noruler
   \| autocmd BufLeave <buffer> set laststatus=2 noshowmode ruler

 " Single mappings
 let g:which_key_map['/'] = [ '<Plug>NERDCommenterToggle' , 'comment' ]
 let g:which_key_map['e'] = [ ':NERDTree'                 , 'explorer' ]
 let g:which_key_map['f'] = [ ':Files'                    , 'search files' ]
 let g:which_key_map['h'] = [ '<C-W>s'                    , 'split below']
 let g:which_key_map['r'] = [ ':Ranger'                   , 'ranger' ]
 let g:which_key_map['S'] = [ ':Startify'                 , 'start screen' ]
 let g:which_key_map['T'] = [ ':Rg'                       , 'search text' ]
 let g:which_key_map['v'] = [ '<C-W>v'                    , 'split right']
 let g:which_key_map['z'] = [ 'Goyo'                      , 'zen' ]
 " let g:which_key_map['e'] = [ ':CocCommand explorer'      , 'explorer' ]

 " s is for search
 let g:which_key_map.s = {
       \ 'name' : '+search' ,
       \ '/' : [':History/'   , 'history'],
       \ ';' : [':Commands'   , 'commands'],
       \ 'a' : [':Ag'         , 'text Ag'],
       \ 'b' : [':BLines'     , 'current buffer'],
       \ 'B' : [':Buffers'    , 'open buffers'],
       \ 'c' : [':Commits'    , 'commits'],
       \ 'C' : [':BCommits'   , 'buffer commits'],
       \ 'f' : [':Files'      , 'files'],
       \ 'g' : [':GFiles'     , 'git files'],
       \ 'G' : [':GFiles?'    , 'modified git files'],
       \ 'h' : [':History'    , 'file history'],
       \ 'H' : [':History:'   , 'command history'],
       \ 'l' : [':Lines'      , 'lines'] ,
       \ 'm' : [':Marks'      , 'marks'] ,
       \ 'M' : [':Maps'       , 'normal maps'] ,
       \ 'p' : [':Helptags'   , 'help tags'] ,
       \ 'P' : [':Tags'       , 'project tags'],
       \ 's' : [':Snippets'   , 'snippets'],
       \ 'S' : [':Colors'     , 'color schemes'],
       \ 't' : [':Rg'         , 'text Rg'],
       \ 'T' : [':BTags'      , 'buffer tags'],
       \ 'w' : [':Windows'    , 'search windows'],
       \ 'y' : [':Filetypes'  , 'file types'],
       \ 'z' : [':FZF'        , 'FZF'],
       \ }

 " b is for buffer
 let g:which_key_map.b = {
       \ 'name' : '+buffer' ,
       \ '1' : ['b1'          , 'buffer 1'],
       \ '2' : ['b2'          , 'buffer 2'],
       \ 'd' : ['bd'          , 'delete-buffer'],
       \ 'f' : ['bfirst'      , 'first-buffer'],
       \ 'h' : ['Startify'    , 'home-buffer'],
       \ 'l' : ['blast'       , 'last-buffer'],
       \ 'n' : ['bnext'       , 'next-buffer'],
       \ 'p' : ['bprevious'   , 'previous-buffer'],
       \ '?' : ['Buffers'     , 'fzf-buffer'],
       \ }

 " g is for git
 let g:which_key_map.g = {
       \'name' : '+git' ,
       \'b' : [':Git blame'   , 'blame'],
       \'B' : [':GBrowse'     , 'browse'],
       \'d' : [':Git diff'    , 'diff'],
       \'l' : [':Git log'     , 'log'],
       \'L' : [':Git lg'      , 'lg'],
       \'s' : [':Gstatus'     , 'status'],
       \'S' : [':Git add'     , 'stage'],
       \'r' : [':Git reflog'  , 'reflog'],
       \ }

 let g:which_key_map.p = {
       \'name' : '+plug' ,
       \'c' : [':PlugClean'   , 'clean'],
       \'i' : [':PlugInstall' , 'install'],
       \'d' : [':Plugdiff'    , 'diff'],
       \'s' : [':PlugStatus'  , 'status'],
       \'S' : [':PlugSnapshot', 'snapshot'],
       \'u' : [':PlugUpdate'  , 'update'],
       \'U' : [':PlugUpgrade' , 'upgrade'],
       \ }

 " Register which key map
 call which_key#register('<Space>', "g:which_key_map")

endif

" }}}

" ----------------------------------- FZF Plugins Configuration  {{{

if PluginLoaded('fzf.vim')
    command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)

  function! RipgrepFzf(query, fullscreen)
    let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
  endfunction

  command! -nargs=* -bang Rg call RipgrepFzf(<q-args>, <bang>0)
endif

" }}}

" ----------------------------------- Coc configurations {{{

if PluginLoaded('coc.nvim')
  " ----------------------
  " General configurations
  " ----------------------

  " You will have bad experience for diagnostic messages when it's default 4000.
  set updatetime=300

  " don't give |ins-completion-menu| messages.
  set shortmess+=c

  " Always show the signcolumn, otherwise it would shift the text each time
  " diagnostics appear/become resolved.
  if has("patch-8.1.1564")
    " Recently vim can merge signcolumn and number column into one
    set signcolumn=number
  else
    set signcolumn=yes
  endif

  " -----------------
  " Keyboard mappings
  " -----------------
  " Use tab for trigger completion with characters ahead and navigate.
  inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()

  inoremap <expr> <S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

  " Use <c-space> to trigger completion.
  inoremap <silent> <expr> <C-space> coc#refresh()

  " Navigate diagnostics
  nmap <silent> dn <Plug>(coc-diagnostic-next)
  nmap <silent> dp <Plug>(coc-diagnostic-prev)

  " Remap keys for gotos
  nmap <silent> gD <Plug>(coc-definition)
  nmap <silent> gd <Plug>(coc-declaration)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  " Remap for rename current word
  nmap <leader>rn <Plug>(coc-rename)

  " Remap for format selected region
  xmap <silent> <leader>f <Plug>(coc-format-selected)
  nmap <silent> <leader>f <Plug>(coc-format-selected)

  " Hotkey to Format current buffer
  nnoremap <leader>F :Format<CR>

  " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
  xmap <leader>a <Plug>(coc-codeaction-selected)
  nmap <leader>a <Plug>(coc-codeaction-selected)

  " Remap for do codeAction of current line
  nmap <leader>ac <Plug>(coc-codeaction)

  " Fix autofix problem of current line
  nmap <leader>qf <Plug>(coc-fix-current)

  " Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
  nmap <silent> <TAB> <Plug>(coc-range-select)
  xmap <silent> <TAB> <Plug>(coc-range-select)

   " Show all diagnostics
  nnoremap <silent> <leader>cd :<C-u>CocList diagnostics<cr>
  " Manage extensions
  nnoremap <silent> <leader>ce :<C-u>CocList extensions<cr>
  " Show commands
  nnoremap <silent> <leader>cc :<C-u>CocList commands<cr>
  " Find symbol of current document
  nnoremap <silent> <leader>cr :<C-u>CocList outline<cr>
  " Search workspace symbols
  nnoremap <silent> <leader>cs :<C-u>CocList -I symbols<cr>

  " Use `:Format` to format current buffer
  command! -nargs=0 Format :call CocAction('format')

  " -----------------
  " Utility functions
  " -----------------
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction

  " Dev icons refresh
  " if exists("g:loaded_webdevicons")
    " call webdevicons#refresh()
  " endif

endif

" }}}

" }}}

" }}}
