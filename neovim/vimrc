" -------------------------------------------------------------------------------------------------
"                             __      _______ __  __ _____   _____
"                             \ \    / /_   _|  \/  |  __ \ / ____|
"                              \ \  / /  | | | \  / | |__) | |
"                               \ \/ /   | | | |\/| |  _  /| |
"                                \  /   _| |_| |  | | | \ \| |____
"                                 \/   |_____|_|  |_|_|  \_\\_____|
"
" Author : Tryfon Tsakiris
" Email  : tr.tsakiris@gmail.com
" URL    : https://github.com/tsakirist/configurations/blob/master/neovim/vimrc
" -------------------------------------------------------------------------------------------------


" Vim defaults to `compatible` when selecting a vimrc with the command-line '-u' argument.
" Override that behaviour to nocompatible.
if &compatible
  set nocompatible
endif


" ---------------------------------- Plugin installer configurations ------------------------------


" Automate the process of installing vim-plug when required
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
     \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins will be downloaded under the specified directory
call plug#begin('~/.vim/plugged')


" -------------------------------------- Plugin list declaration -----------------------------------


" Colorschemes
Plug 'joshdick/onedark.vim'
Plug 'sjl/badwolf'
Plug 'morhetz/gruvbox'
Plug 'ErichDonGubler/vim-sublime-monokai'

" Status/tabline themes
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Syntax highlighting and more
Plug 'sheerun/vim-polyglot'
Plug 'octol/vim-cpp-enhanced-highlight'

" Nerd plugins
Plug 'scrooloose/nerdtree'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'scrooloose/nerdcommenter'

" Multiple cursors like in Subl3
Plug 'terryma/vim-multiple-cursors'

" Fancy start/welcome screen
Plug 'mhinz/vim-startify'

" Display identation levels with lines
Plug 'Yggdroot/indentLine'

" Distraction free mode
Plug 'junegunn/goyo.vim'

" Fast find and replace across files
Plug 'dkprice/vim-easygrep'

" Surround mappings for enclosed text
Plug 'tpope/vim-surround'

" Auto insert brackets, parentheses, etc
Plug 'jiangmiao/auto-pairs'

" Easily locate cursor after search
Plug 'inside/vim-search-pulse'

" Show an indication in the sign column for git diffs
Plug 'mhinz/vim-signify'

" A git wrapper for vim
Plug 'tpope/vim-fugitive'

" Automatically resize openeed windows
Plug 'justincampbell/vim-eighties'

" Add file type icons to various plugins
Plug 'ryanoasis/vim-devicons'

" An interactive calculator inside a buffer
Plug 'fedorenchik/VimCalc3'

" Highlight/Underline word under cursor
Plug 'dominikduda/vim_current_word'

" Fold everything except the search pattern
Plug 'embear/Vim-foldsearch'

" Text filtering and alignment
Plug 'godlygeek/tabular'

" The world-renowned fuzzy finder FZF
Plug 'junegunn/fzf.vim'
Plug '~/.fzf'

" Intellisense engine with LSP like VSCode
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" Plug 'ervandew/supertab'

" Useful plugins for symbol lookups and tags
" Plug 'liuchengxu/vista.vim'
" Plug 'majutsushi/tagbar'

" List ends here. Plugins become visible to Vim after this call
call plug#end()


" --------------------------------------- Utility Functions ---------------------------------------


" Function to zoom-in and zoom-out from a window
function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction

" Function to trim trailing whitespace
" https://vi.stackexchange.com/a/456
function! TrimTrailWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfunction

" Function to make a whole word search faster
function! SearchWord(word)
    let @/ = '\<' . a:word . '\>'
    normal n
endfunction

" Fills the current line with a double quote, a space and then adds the provided character 'c'
" as many times as needed to align the line with the previous one.
function! Fill(c)
    exec 'norm  cc" '
    exec 'norm '.(strlen(getline(line('.') - 1)) - 2).'A'.nr2char(a:c)
endfunction


" ------------------------------------- General Configurations ------------------------------------


" Syntax highlighting
syntax on
silent! colorscheme onedark
" silent! colorscheme badwolf
"highlight LineNr term=bold cterm=None ctermfg=Red ctermbg=None

" Set true colors inside neovim
set termguicolors

" Highlight the current line and also highlight the column @120 (ruler)
set colorcolumn=120
set cursorline
" highlight colorcolumn ctermbg=red

" This displays the line numbers and controls the number of columns used for the line number
set number
set numberwidth=1

" Insert spaces when <Tab> is pressed. With this option set, if you want to enter a real tab character use Ctrl-V<Tab>
" key sequence
set expandtab

" Controls the number of space characters inserted when pressing the tab key
set tabstop=4

" Controls the number of space characters inserted for identation
set shiftwidth=4

" This makes searches case insensitive
set ignorecase

" This makes searches with a single capital letter to be case sensitive
set smartcase

" This highlights the search pattern as you type
set incsearch

" Open windows always below or right
set splitbelow
set splitright

" Set the maximum text width before vim automatically wraps it
set textwidth=120

" Set default encoding
set encoding=UTF-8

" This is used to control the Ctrl + C command and copy to the system's clipboard
" set clipboard+=unnamedplus
set clipboard^=unnamed,unnamedplus

" This option will render characters for spaces, tabs etc
" It won't work for tabs because i have made vim convert tabs to spaces
set listchars=trail:·,tab:»·
set list

" Add persistent undo for vim
" ---------------------------
" Create necessary directories if needed automatically
if !isdirectory($HOME."/.vim")
    call mkdir($HOME."/.vim", "", 0770)
endif
if !isdirectory($HOME."/.vim/undo-dir")
    call mkdir($HOME."/.vim/undo-dir", "", 0700)
endif

set undodir=~/.vim/undo-dir
set undofile

" Format options configuration:
" 't' is required in format options to wrap text in insert mode
" if a line is longer than textwidth it may not be wraped if 'l' is in format options
" Disable <CR> key from autocommenting when pressing enter in a commented line
autocmd BufEnter * set fo+=t fo-=r

" Remove trailing whitespaces on file save
autocmd BufWritePre * :call TrimTrailWhitespace()

" This is used to preserve the clipboard when vim exits
autocmd VimLeave * call system("xclip -selection clipboard -i", getreg("+"))

" Close NERDTree automatically when it is the only window left open
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Groupped configurations of :term
augroup TerminalConfigs
    " Clear old autocommands of this group
    autocmd!
    " Automatically enter in insert mode when in terminal pane
    autocmd TermOpen,BufEnter,WinEnter * if &buftype == 'terminal' | :startinsert | endif
    " Disable linenumbering when in terminal
    autocmd TermOpen * setlocal nonumber norelativenumber
augroup END

" Change linenumber coloring to white for onedark
augroup colorset
    " Clear old autocommands of this group
    autocmd!
    let s:white = { "gui": "#ABB2BF", "cterm": "145", "cterm16" : "7" }
    " silent! autocmd ColorScheme * call onedark#set_highlight("LineNr", { "fg": s:white })
augroup END

" Open NERDTree automatically when vim starts
"autocmd vimenter * NERDTree

" Nerd Commenter configuration options
" -------------------------------------
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims=1

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines=1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace=1

" Make NerdTree more minimal
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=1

" Goyo distraction free mode configuration options
" ------------------------------------------------
let g:goyo_width="80%"
let g:goyo_height="85%"
let g:goyo_linenr=0

" Vim-Signify configuration options
" ---------------------------------
" Change the delete sign of git-signify from '_' to '-'
let g:signify_sign_delete='-'

" Airline configuration options
" -----------------------------
" Change airline theme
let g:airline_theme='onedark'

" Enable tabline extension
let g:airline#extensions#tabline#enabled=1

" Add powerline fonts to populate powerline symbols
let g:airline_powerline_fonts=1

" Integrate airline with coc
let g:airline#extensions#coc#enabled=1

" Change the tabline separators
" let g:airline#extensions#tabline#left_sep=' '
" let g:airline#extensions#tabline#left_alt_sep='|'

" Deoplete configuration options
" ------------------------------
" Enable deoplete autocompletion
" let g:deoplete#enable_at_startup=1

" EasyGrep configuration options
" ------------------------------
" Make EasyGrep search only in the current buffer
let g:EasyGrepMode=1
let g:EasyGrepSearchCurrentBufferOnly=1
let g:EasyGrepIgnoreCase=0

" VimEighties configuration options
" ---------------------------------
let g:eighties_minimum_width=80
let g:eighties_enabled=1

" GitNerdTree configuration options
" ---------------------------------
" Align git nerd tree plugin with dev icons
let g:WebDevIconsNerdTreeGitPluginForceVAlign=1

" Vim Current Word configuration options
" --------------------------------------
let g:vim_current_word#highlight_current_word=0


" ------------------------------------------ Keybindings ------------------------------------------


" Change buffers quickly
nnoremap <silent> bn :bnext<CR>
nnoremap <silent> bp :bprevious<CR>
nnoremap <silent> bd :bd<CR>

" Equal resize of all opened splits
nnoremap <silent> <leader>eq <C-w>=<CR>

" Fill the current line with string '" <count><char>'
" nnoremap <expr> <F3> ':call Fill('.getchar().")\<CR>"

" Toggle line numbers
nnoremap <silent> <leader>l :set nu!<CR>

" Toggle Goyo - distraction free writing
nnoremap <silent> <F1> :Goyo<CR>
nnoremap <silent> <leader>1 :Goyo<CR>

" Toggle between folds
nnoremap <expr> <F2> &foldlevel ? 'zM' :'zR'

" Fill the current line with a leading "<space><prev_line_cols>[-]
nnoremap <expr> <F3> ":call Fill(45)\<CR>"

" Set this keyboard combination to toggle NERDTree, it's the same as Sublime Text 3
map <silent> <C-k><C-b> :NERDTreeToggle<CR>

" Set Ctrl-t to jump to next occurence of the word under cursor
nnoremap <silent> <C-t> *

" Keybinds to move lines like sublime text 3
" https://vim.fandom.com/wiki/Moving_lines_up_or_down
" gv=gv re-selects the visual block after each operation
nnoremap <silent> <C-S-Up> :m-2<CR>
nnoremap <silent> <C-S-Down> :m+<CR>
inoremap <silent> <C-S-Up> <Esc>:m-2<CR>
inoremap <silent> <C-S-Down> <Esc>:m+<CR>
vnoremap <silent> <C-S-Up> :m '<-2<CR>gv=gv
vnoremap <silent> <C-S-Down> :m '>+1<CR>gv=gv

" Duplicate the current line
" 'm' sets a mark that we can return afterwards by using '`' followed by the mark's name
" :normal properly handles a [count] prepended before the command e.g. 3w, 5d etc
" http://vimcasts.org/episodes/creating-mappings-that-accept-a-count/
nnoremap <leader>d  :normal m`yyp``<CR>
inoremap <leader>d <Esc>m`yyp``<CR>A
vnoremap <leader>d <Esc>m`yyp``<CR>

" Hitting ESC when inside a :term to get into normal mode
tnoremap <Esc> <C-\><C-N>

" Insert a blank line with <leader>Enter without leaving normal mode
nnoremap <silent> <leader><CR> o<Esc>

" Save files with ctrl+s in every mode
nnoremap <C-s> :w<CR>
inoremap <C-s> <Esc>:w<CR>
vnoremap <C-s> <Esc>:w<CR>

" Keymaps to quit current buffer with ctrl+q
nnoremap <silent> <C-q> <Esc>:q<CR>
inoremap <silent> <C-q> <Esc>:q<CR>
vnoremap <silent> <C-q> <Esc>:q<CR>

" Keymap to quit all buffers with shift+q
nnoremap <silent> <S-q> <Esc>:qa<CR>

" Easiliy toggle comments @NERDCommenter
map <leader><leader> <leader>c<Space>

" Toggling comment in insert mode keeps insert mode :startinsert
imap <leader><leader> <Esc><leader>c<Space>:startinsert<CR>

" Clear highlighting with escape when in normal mode
" https://stackoverflow.com/a/1037182/6654329
nnoremap <silent> <Esc> :noh<return><Esc>
nnoremap <silent> <Esc>^[ <Esc>^[

" Keymap to source the vimrc automatically
nnoremap <silent> <leader>sc :source $MYVIMRC<CR>

" Commands/Keymaps to open terminals horizontally and vertically
command! -nargs=* HT split  | terminal <args>
command! -nargs=* VT vsplit | terminal <args>

nnoremap <silent> <leader>ht :HT<CR>
nnoremap <silent> <leader>vt :VT<CR>

" Make the whole-word search proc with <leader>/
command! -nargs=1 SearchWord call SearchWord(<f-args>)
nnoremap <leader>/ :SearchWord

" Command and key mapping to enable the zoom-in and zoom-out
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> <leader>z :ZoomToggle<CR>

" Add mouse support and change the default mouse scrolling wheel options
set mouse=a
nnoremap <ScrollWheelUp>   4<C-y>
nnoremap <ScrollWheelDown> 4<C-e>
xnoremap <ScrollWheelUp>   4<C-y>
xnoremap <ScrollWheelDown> 4<C-e>

" Git-signify keybinds to use the plugin more easily
nnoremap <silent> <leader>gh :SignifyToggleHighlight<CR>
nnoremap <silent> <leader>gf :SignifyFold<CR>
nnoremap <silent> <leader>gd :SignifyDiff<CR>

" Use <Tab> and <S-Tab> to navigate through the autocomplete options
" inoremap <silent> <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <silent> <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"


" ----------------------------------------- Abbreviations -----------------------------------------


" Shebang abbreviation in insert mode
iab #! #!/usr/bin/env bash


" ----------------------------------- FZF Plugins Configuration -----------------------------------


command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--info=inline']}), <bang>0)

function! RipgrepFzf(query, fullscreen)
    let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang Rg call RipgrepFzf(<q-args>, <bang>0)


" -------------------------------------- Coc Configurations ---------------------------------------


" ----------------------
" General configurations
" ----------------------
"
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" -----------------
" Keyboard mappings
" -----------------
" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" Use <c-space> to trigger completion.
inoremap <silent><expr> <C-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Navigate diagnostics
nmap <silent> dn <Plug>(coc-diagnostic-next)
nmap <silent> dp <Plug>(coc-diagnostic-prev)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <silent> <leader>f <Plug>(coc-format-selected)
nmap <silent> <leader>f <Plug>(coc-format-selected)

" Hotkey to Format current buffer
nnoremap <leader><S-f> :Format<CR>

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a <Plug>(coc-codeaction-selected)
nmap <leader>a <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac <Plug>(coc-codeaction)

" Fix autofix problem of current line
nmap <leader>qf <Plug>(coc-fix-current)

" Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" -------------------
" Diagnostic mappings
" -------------------
" Show all diagnostics
nnoremap <silent> <space>d :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>r :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s :<C-u>CocList -I symbols<cr>

" ---------------
" Auto/- commands
" ---------------
augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call CocAction('fold', <f-args>)

" -----------------
" Utility functions
" -----------------
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" -----------------
" Snippets mappings
" -----------------
" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Dev icons refresh
if exists("g:loaded_webdevicons")
  call webdevicons#refresh()
endif


" -------------------------------------- Vista vim configuration ----------------------------------


" Executive used when opening vista sidebar without specifying it.
" See all the avaliable executives via `:echo g:vista#executives`.
let g:vista_default_executive='ctags'

" Ensure you have installed some decent font to show these pretty symbols, then you can enable icon for the kind.
let g:vista#renderer#enable_icon=1
let g:vista_echo_cursor_strategy='floating_win'
let g:vista_highlight_whole_line=1
let g:vista_floating_delay=0

" Key mapping for vista vim
" * \vs to toggle window
" * \vc to close window
" * \vf to open fuzzy finder for tags
nnoremap <leader>vs :Vista!!<CR>
nnoremap <leader>vc :Vista!<CR>
nnoremap <leader>vf :Vista finder coc<CR>


" --------------------------------------- Floating FZF centered -----------------------------------


" https://github.com/junegunn/fzf.vim/issues/664
function! OpenFloatingWin()
   let height = float2nr(&lines * 0.65)
   let width = float2nr(&columns * 0.65)
   let opts = {
        \ 'relative': 'editor',
        \ 'row': (&lines - height) / 2,
        \ 'col': (&columns - width) / 2,
        \ 'width': width,
        \ 'height': height,
        \ 'style': 'minimal',
        \ }
   let buf = nvim_create_buf(v:false, v:true)
   let win = nvim_open_win(buf, v:true, opts)
   call setwinvar(win, '&winhl', 'Normal:Pmenu')
endfunction

let g:fzf_layout = { 'window': 'call OpenFloatingWin()' }
