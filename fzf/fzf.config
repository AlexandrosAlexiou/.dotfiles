# ------------------ Fuzzy Configuration Options ------------------- #

FZF_COMMON_OPTIONS="
    --bind='?:toggle-preview'
    --bind='ctrl-a:toggle-all'
    --bind='ctrl-s:toggle-sort'
    --bind='alt-w:toggle-preview-wrap'
    --bind='ctrl-u:preview-page-up'
    --bind='ctrl-d:preview-page-down'
    --height='80%'
    --tabstop=4
    --multi
    --layout=reverse
    --border
    --cycle
    --preview-window='right:50%:hidden:wrap'
    --preview='([[ -d {} ]] && tree -C {}) || ([[ -f {} ]] && bat --style=full --color=always {}) || echo {}'"

command -v bat > /dev/null && command -v tree > /dev/null && export FZF_DEFAULT_OPTS="$FZF_COMMON_OPTIONS"
command -v fd  > /dev/null && export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
command -v fd  > /dev/null && export FZF_ALT_C_COMMAND='fd . $HOME --type d --hidden --follow --exclude .git'
command -v fd  > /dev/null && export FZF_CTRL_T_COMMAND='fd . $HOME --type f --type d --hidden --follow --exclude .git'

# ------------------------ Helper Functions ------------------------ #
# --------- https://github.com/junegunn/fzf/wiki/examples ---------- #

# foa - Fuzzy open files from 'a'nywhere
# Keybinds:
# -- <Ctrl>-o to open with `vscode` command
# -- <Ctrl>-e or Enter key to open with the $EDITOR
foa() {
    local out file key
    local header=$'Keybinds:\n  -- <Enter>:\topen with nvim\n  -- <Ctrl-o>:\topen with vscode'
    local IFS=$'\n'
    out=("$(fd . | fzf --query="$1" --header $header --exit-0 --expect=ctrl-o,enter)")
    key=$(head -1 <<< "$out")
    file=$(head -2 <<< "$out" | tail -1)
    if [ -n "$file" ]; then
        [ "$key" = ctrl-o ] && code "$file" || ${EDITOR} "$file"
    fi
}

# foc - Fuzzy open files from 'c'urrent directory
# Keybinds:
# -- <Ctrl>-o to open with `vscodeu` command
# -- <Ctrl>-e or Enter key to open with the $EDITOR
foc() {
    local out file key
    local header=$'Keybinds:\n  -- <Enter>:\topen with nvim\n  -- <Ctrl-o>:\topen with vscode'
    local IFS=$'\n'
    out=("$(fzf --query="$1" --header $header --exit-0 --expect=ctrl-o,enter)")
    key=$(head -1 <<< "$out")
    file=$(head -2 <<< "$out" | tail -1)
    if [ -n "$file" ]; then
        [ "$key" = ctrl-o ] && code "$file" || ${EDITOR} "$file"
    fi
}

# fon - Fuzzy open files that contain the 'n'ame string provided as argument
# Keybinds:
# -- <Ctrl>-o to open with `vscode` command
# -- <Ctrl>-e or Enter key to open with the $EDITOR
fon() {
    local files key
    local header=$'Keybinds:\n  -- <Enter>:\topen with nvim\n  -- <Ctrl-o>:\topen with vscode'
    local IFS=$'\n'
    files=(${(f)"$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1 -m --header $header --expect=ctrl-o,enter)"})
    key=$(head -1 <<< "$files")
    # TODO need to fix this to accept many files with TAB
    files=$(tail -1 <<< "$files")
    if [[ -n $files ]]; then
        [ "$key" = ctrl-o ] && code "$files" || ${EDITOR} "$files"
    fi
}

# fkill - Fuzzy kill processes, list only the ones you can kill
fkill() {
    local pid
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi
    if [ "x$pid" != "x" ]; then
        echo $pid | xargs kill -${1:-9}
    fi
}

# cd - Like normal cd but opens an interactive navigation window when called with no arguments
cd() {
    if [[ "$#" != 0 ]]; then
        builtin cd "$@";
        return
    fi
    while true; do
        local lsd=$(echo ".." && ls -p --color=always | grep '/$' | sed 's;/$;;')
        local dir="$(printf '%s\n' "${lsd[@]}" |
            fzf --ansi --reverse --preview '
                __cd_nxt="$(echo {})";
                __cd_path="$(echo $(pwd)/${__cd_nxt} | sed "s;//;/;")";
                echo $__cd_path;
                echo;
                ls -p --color=always "${__cd_path}";
        ')"
        [[ ${#dir} != 0 ]] || return 0
        builtin cd "$dir" &> /dev/null
    done
}

# z - like normal z when used with arguments but displays an fzf prompt when used without
unalias z 2> /dev/null
z() {
    if [ $# -gt 0 ]; then
        _z "$*"
        return
    fi
    cd "$(_z -l 2>&1 | fzf --height 40% --nth 2.. --reverse --inline-info +s --tac --query "${*##-* }" \
    | sed 's/^[0-9,.]* *//')"
}

# fman - Quickly search for man pages through fzf
# if arguments are supplied it will open the first argument's man page with fzf piped
fman() {
    if [ "$#" -gt 0 ]; then
        man "$1" | fzf
    else
        man -k . | fzf --prompt='Man> ' | awk '{print $1}' | xargs -r man
    fi
}

# fh - Fuzzy find a command from history and evaluate it
fh() {
    eval \
    $(([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -r 's/ *[0-9]*\*? *//' | sed -r 's/\\/\\\\/g')
}

# frg - Use ripgrep (rg) with FZF finder
# https://github.com/junegunn/fzf#3-interactive-ripgrep-integration
frg() {
    local RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    local INITIAL_QUERY="${*:-}"
    local input=$(FZF_DEFAULT_COMMAND="$RG_PREFIX $(printf %q "$INITIAL_QUERY")" \
      fzf --ansi \
          --disabled --query "$INITIAL_QUERY" \
          --bind "change:reload:sleep 0.1; $RG_PREFIX {q} || true" \
          --delimiter : \
          --preview 'bat --color=always {1} --highlight-line {2}' \
          --preview-window 'up,60%,border-bottom,+{2}+3/3,~3')
    local selected=("${(@s/:/)input}")
    [ -n "${selected[1]}" ] && nvim "${selected[1]}" "+${selected[2]}"
}

# falias - Search for aliases with fzf
falias() {
    alias | fzf
}

# fproc - Search for processes and reload with CTR-R, press enter to kill process
fproc() {
    (date; ps -ef) |
        fzf --bind='ctrl-r:reload(date; ps -ef)' \
        --header=$'Press CTRL-R to reload\n\n' --header-lines=2 \
        --preview='echo {}' --preview-window=down,3,wrap \
        --layout=reverse --height=80% | awk '{print $2}' | xargs kill -9
}
