# ------------------ Fuzzy Configuration Options ------------------- #
# ------------------- vim: set sw=4 ft=config: -------------------- #

FZF_COMMON_OPTIONS="
    --bind='?:toggle-preview'
    --bind='ctrl-a:toggle-all'
    --bind='ctrl-s:toggle-sort'
    --bind='alt-w:toggle-preview-wrap'
    --bind='ctrl-u:preview-page-up'
    --bind='ctrl-d:preview-page-down'
    --bind 'ctrl-/:change-preview-window(right,50%|down,50%|top,50%)'
    --height='80%'
    --tabstop=4
    --multi
    --layout=reverse
    --border
    --cycle
    --ansi
    --color=16
    --preview-window='right:50%:wrap:hidden'
    --preview='([[ -d {} ]] && tree -C {}) || ([[ -f {} ]] && bat --style=full --color=always {}) || echo {}'"

command -v bat > /dev/null && command -v tree > /dev/null && export FZF_DEFAULT_OPTS="$FZF_COMMON_OPTIONS"
command -v fd  > /dev/null && export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
command -v fd  > /dev/null && export FZF_ALT_C_COMMAND='fd . $HOME --type d --hidden --follow --exclude .git'
command -v fd  > /dev/null && export FZF_CTRL_T_COMMAND='fd . $HOME --type f --type d --hidden --follow --exclude .git'

# ------------------------ Helper Functions ------------------------ #
# --------- https://github.com/junegunn/fzf/wiki/examples ---------- #

# foa - Fuzzy open files from 'a'nywhere
# Keybinds:
# -- <Ctrl>-o to open with `vscode` command
# -- <Ctrl>-e or Enter key to open with the $EDITOR
foa() {
    local out file key
    local header=$'Keybinds:\n  -- <Enter>:\topen with nvim\n  -- <Ctrl-o>:\topen with vscode'
    local IFS=$'\n'
    out=("$(fd . | fzf --query="$1" --header $header --exit-0 --expect=ctrl-o,enter)")
    key=$(head -1 <<< "$out")
    file=$(head -2 <<< "$out" | tail -1)
    if [ -n "$file" ]; then
        [ "$key" = ctrl-o ] && code "$file" || ${EDITOR} "$file"
    fi
}

# foc - Fuzzy open files from 'c'urrent directory
# Keybinds:
# -- <Ctrl>-o to open with `vscodeu` command
# -- <Ctrl>-e or Enter key to open with the $EDITOR
foc() {
    local out file key
    local header=$'Keybinds:\n  -- <Enter>:\topen with nvim\n  -- <Ctrl-o>:\topen with vscode'
    local IFS=$'\n'
    out=("$(fzf --query="$1" --header $header --exit-0 --expect=ctrl-o,enter)")
    key=$(head -1 <<< "$out")
    file=$(head -2 <<< "$out" | tail -1)
    if [ -n "$file" ]; then
        [ "$key" = ctrl-o ] && code "$file" || ${EDITOR} "$file"
    fi
}

# fon - Fuzzy open files that contain the 'n'ame string provided as argument
# Keybinds:
# -- <Ctrl>-o to open with `vscode` command
# -- <Ctrl>-e or Enter key to open with the $EDITOR
fon() {
    local files key
    local header=$'Keybinds:\n  -- <Enter>:\topen with nvim\n  -- <Ctrl-o>:\topen with vscode'
    local IFS=$'\n'
    files=(${(f)"$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1 -m --header $header --expect=ctrl-o,enter)"})
    key=$(head -1 <<< "$files")
    # TODO need to fix this to accept many files with TAB
    files=$(tail -1 <<< "$files")
    if [[ -n $files ]]; then
        [ "$key" = ctrl-o ] && code "$files" || ${EDITOR} "$files"
    fi
}

# fkill - Fuzzy kill processes, list only the ones you can kill
fkill() {
    local pid

    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d)
    else
        pid=$(ps -ef | sed 1d)
    fi

    pid=$(echo "$pid" | fzf -m --prompt '󰯆 kill> ' | awk '{print $2}')

    if [ -n "$pid" ]; then
        echo "$pid" | xargs kill -${1:-9}
    fi
}

# cd - Like normal cd but opens an interactive navigation window when called with no arguments
cd() {
    if [[ "$#" != 0 ]]; then
        builtin cd "$@";
        return
    fi
    while true; do
        local lsd=$(echo ".." && ls -p --color=always | grep '/$' | sed 's;/$;;')
        local dir="$(printf '%s\n' "${lsd[@]}" |
            fzf --ansi --reverse --preview '
                __cd_nxt="$(echo {})";
                __cd_path="$(echo $(pwd)/${__cd_nxt} | sed "s;//;/;")";
                echo $__cd_path;
                echo;
                ls -p --color=always "${__cd_path}";
        ')"
        [[ ${#dir} != 0 ]] || return 0
        builtin cd "$dir" &> /dev/null
    done
}

# fman - Quickly search for man pages through fzf
fman() {
    local BAT='/usr/bin/man "$(echo {1} | sed "s/(.*//")"'
    local NEOVIM_MAN_PAGER='$EDITOR "+Man $(echo {1} | sed "s/'"'"'//g") | only"'
    /usr/bin/man -k . \
        | sort -u \
        | awk -v cyan=$(tput setaf 6) -v blue=$(tput setaf 4) -v res=$(tput sgr0) -v bld=$(tput bold) '{ $1=cyan bld $1; $2=res blue;} 1' \
        | fzf -q "$1" \
            --ansi \
            --tiebreak=begin \
            --prompt=' Man > '  \
            --preview-window '50%,rounded,<50(up,85%,border-bottom)' \
            --preview "${BAT} | col -bx | bat --language=man --plain --color always" \
            --bind "enter:execute(${NEOVIM_MAN_PAGER})" \
            --bind "alt-m:+change-preview(${batman})+change-prompt( Man > )"
}

# fh - Fuzzy find a command from history and evaluate it
fr() {
    eval \
    $(([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed -r 's/ *[0-9]*\*? *//' | sed -r 's/\\/\\\\/g')
}

# fr - Fuzzy find a command from history and put it in command line
fh() {
    print -z $((fc -l 1) | fzf +s --tac | sed -r 's/ *[0-9]*\*? *//' | sed -r 's/\\/\\\\/g')
}

# frg - Use ripgrep (rg) interactively with FZF finder
# https://github.com/junegunn/fzf/blob/master/ADVANCED.md#switching-between-ripgrep-mode-and-fzf-mode-using-a-single-key-binding
frg() {
    # Remove remnants from previous invocations
    rm -f /tmp/rg-fzf-{r,f}

    local RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    local INITIAL_QUERY="${*:-}"
    : | fzf --ansi --disabled --query "$INITIAL_QUERY" \
        --bind "start:reload:$RG_PREFIX {q}" \
        --bind "change:reload:sleep 0.1; $RG_PREFIX {q} || true" \
        --bind 'ctrl-t:transform:[[ ! $FZF_PROMPT =~ Rg ]] &&
        echo "rebind(change)+change-prompt(Rg> )+disable-search+transform-query:echo \{q} > /tmp/rg-fzf-f; cat /tmp/rg-fzf-r" ||
        echo "unbind(change)+change-prompt(Fzf> )+enable-search+transform-query:echo \{q} > /tmp/rg-fzf-r; cat /tmp/rg-fzf-f"' \
        --color "hl:-1:underline,hl+:-1:underline:reverse" \
        --prompt 'Rg> ' \
        --delimiter : \
        --header 'CTRL-T: Switch between Rg/Fzf' \
        --preview 'bat --color=always {1} --highlight-line {2}' \
        --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \
        --bind 'enter:become(nvim {1} +{2})'
    }

# falias - Search for aliases with fzf
falias() {
    alias | fzf
}

# fproc - Search for processes and reload with CTR-R, press enter to kill process
fproc() {
    (date; ps -ef) |
        fzf --bind='ctrl-r:reload(date; ps -ef)' \
        --prompt '󰯆 kill> ' \
        --header=$'Press CTRL-R to reload\n\n' --header-lines=2 \
        --preview='echo {}' --preview-window=down,3,wrap \
        --layout=reverse --height=80% | awk '{print $2}' | xargs kill -9
}

# Set up fzf key bindings and fuzzy completion
eval "$(fzf --zsh)"
